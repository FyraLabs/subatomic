// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/admin.proto

package adminv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/FyraLabs/subatomic/gen/admin/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "admin.v1.AdminService"
)

// AdminServiceClient is a client for the admin.v1.AdminService service.
type AdminServiceClient interface {
	CreateRepo(context.Context, *connect_go.Request[v1.CreateRepoRequest]) (*connect_go.Response[v1.CreateRepoResponse], error)
	DeleteRepo(context.Context, *connect_go.Request[v1.DeleteRepoRequest]) (*connect_go.Response[v1.DeleteRepoResponse], error)
	UploadArtifact(context.Context) *connect_go.ClientStreamForClient[v1.UploadArtifactRequest, v1.UploadArtifactResponse]
}

// NewAdminServiceClient constructs a client for the admin.v1.AdminService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		createRepo: connect_go.NewClient[v1.CreateRepoRequest, v1.CreateRepoResponse](
			httpClient,
			baseURL+"/admin.v1.AdminService/CreateRepo",
			opts...,
		),
		deleteRepo: connect_go.NewClient[v1.DeleteRepoRequest, v1.DeleteRepoResponse](
			httpClient,
			baseURL+"/admin.v1.AdminService/DeleteRepo",
			opts...,
		),
		uploadArtifact: connect_go.NewClient[v1.UploadArtifactRequest, v1.UploadArtifactResponse](
			httpClient,
			baseURL+"/admin.v1.AdminService/UploadArtifact",
			opts...,
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	createRepo     *connect_go.Client[v1.CreateRepoRequest, v1.CreateRepoResponse]
	deleteRepo     *connect_go.Client[v1.DeleteRepoRequest, v1.DeleteRepoResponse]
	uploadArtifact *connect_go.Client[v1.UploadArtifactRequest, v1.UploadArtifactResponse]
}

// CreateRepo calls admin.v1.AdminService.CreateRepo.
func (c *adminServiceClient) CreateRepo(ctx context.Context, req *connect_go.Request[v1.CreateRepoRequest]) (*connect_go.Response[v1.CreateRepoResponse], error) {
	return c.createRepo.CallUnary(ctx, req)
}

// DeleteRepo calls admin.v1.AdminService.DeleteRepo.
func (c *adminServiceClient) DeleteRepo(ctx context.Context, req *connect_go.Request[v1.DeleteRepoRequest]) (*connect_go.Response[v1.DeleteRepoResponse], error) {
	return c.deleteRepo.CallUnary(ctx, req)
}

// UploadArtifact calls admin.v1.AdminService.UploadArtifact.
func (c *adminServiceClient) UploadArtifact(ctx context.Context) *connect_go.ClientStreamForClient[v1.UploadArtifactRequest, v1.UploadArtifactResponse] {
	return c.uploadArtifact.CallClientStream(ctx)
}

// AdminServiceHandler is an implementation of the admin.v1.AdminService service.
type AdminServiceHandler interface {
	CreateRepo(context.Context, *connect_go.Request[v1.CreateRepoRequest]) (*connect_go.Response[v1.CreateRepoResponse], error)
	DeleteRepo(context.Context, *connect_go.Request[v1.DeleteRepoRequest]) (*connect_go.Response[v1.DeleteRepoResponse], error)
	UploadArtifact(context.Context, *connect_go.ClientStream[v1.UploadArtifactRequest]) (*connect_go.Response[v1.UploadArtifactResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/admin.v1.AdminService/CreateRepo", connect_go.NewUnaryHandler(
		"/admin.v1.AdminService/CreateRepo",
		svc.CreateRepo,
		opts...,
	))
	mux.Handle("/admin.v1.AdminService/DeleteRepo", connect_go.NewUnaryHandler(
		"/admin.v1.AdminService/DeleteRepo",
		svc.DeleteRepo,
		opts...,
	))
	mux.Handle("/admin.v1.AdminService/UploadArtifact", connect_go.NewClientStreamHandler(
		"/admin.v1.AdminService/UploadArtifact",
		svc.UploadArtifact,
		opts...,
	))
	return "/admin.v1.AdminService/", mux
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) CreateRepo(context.Context, *connect_go.Request[v1.CreateRepoRequest]) (*connect_go.Response[v1.CreateRepoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("admin.v1.AdminService.CreateRepo is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteRepo(context.Context, *connect_go.Request[v1.DeleteRepoRequest]) (*connect_go.Response[v1.DeleteRepoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("admin.v1.AdminService.DeleteRepo is not implemented"))
}

func (UnimplementedAdminServiceHandler) UploadArtifact(context.Context, *connect_go.ClientStream[v1.UploadArtifactRequest]) (*connect_go.Response[v1.UploadArtifactResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("admin.v1.AdminService.UploadArtifact is not implemented"))
}
