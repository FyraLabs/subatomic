// Code generated by ent, DO NOT EDIT.

package repository

import (
	"fmt"

	"github.com/FyraLabs/subatomic/property"
)

const (
	// Label holds the string label denoting the repository type in the database.
	Label = "repository"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "oid"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// Table holds the table name of the repository in the database.
	Table = "repositories"
)

// Columns holds all SQL columns for repository fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type property.RepositoryType) error {
	switch _type.String() {
	case "LOW", "HIGH":
		return nil
	default:
		return fmt.Errorf("repository: invalid enum value for type field: %q", _type)
	}
}
