// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FyraLabs/subatomic/server/ent/predicate"
	"github.com/FyraLabs/subatomic/server/ent/repo"
	"github.com/FyraLabs/subatomic/server/ent/rpmpackage"
)

// RpmPackageUpdate is the builder for updating RpmPackage entities.
type RpmPackageUpdate struct {
	config
	hooks    []Hook
	mutation *RpmPackageMutation
}

// Where appends a list predicates to the RpmPackageUpdate builder.
func (_u *RpmPackageUpdate) Where(ps ...predicate.RpmPackage) *RpmPackageUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *RpmPackageUpdate) SetName(v string) *RpmPackageUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RpmPackageUpdate) SetNillableName(v *string) *RpmPackageUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEpoch sets the "epoch" field.
func (_u *RpmPackageUpdate) SetEpoch(v int) *RpmPackageUpdate {
	_u.mutation.ResetEpoch()
	_u.mutation.SetEpoch(v)
	return _u
}

// SetNillableEpoch sets the "epoch" field if the given value is not nil.
func (_u *RpmPackageUpdate) SetNillableEpoch(v *int) *RpmPackageUpdate {
	if v != nil {
		_u.SetEpoch(*v)
	}
	return _u
}

// AddEpoch adds value to the "epoch" field.
func (_u *RpmPackageUpdate) AddEpoch(v int) *RpmPackageUpdate {
	_u.mutation.AddEpoch(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *RpmPackageUpdate) SetVersion(v string) *RpmPackageUpdate {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *RpmPackageUpdate) SetNillableVersion(v *string) *RpmPackageUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetRelease sets the "release" field.
func (_u *RpmPackageUpdate) SetRelease(v string) *RpmPackageUpdate {
	_u.mutation.SetRelease(v)
	return _u
}

// SetNillableRelease sets the "release" field if the given value is not nil.
func (_u *RpmPackageUpdate) SetNillableRelease(v *string) *RpmPackageUpdate {
	if v != nil {
		_u.SetRelease(*v)
	}
	return _u
}

// SetArch sets the "arch" field.
func (_u *RpmPackageUpdate) SetArch(v string) *RpmPackageUpdate {
	_u.mutation.SetArch(v)
	return _u
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (_u *RpmPackageUpdate) SetNillableArch(v *string) *RpmPackageUpdate {
	if v != nil {
		_u.SetArch(*v)
	}
	return _u
}

// SetFilePath sets the "file_path" field.
func (_u *RpmPackageUpdate) SetFilePath(v string) *RpmPackageUpdate {
	_u.mutation.SetFilePath(v)
	return _u
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (_u *RpmPackageUpdate) SetNillableFilePath(v *string) *RpmPackageUpdate {
	if v != nil {
		_u.SetFilePath(*v)
	}
	return _u
}

// SetRepoID sets the "repo" edge to the Repo entity by ID.
func (_u *RpmPackageUpdate) SetRepoID(id string) *RpmPackageUpdate {
	_u.mutation.SetRepoID(id)
	return _u
}

// SetNillableRepoID sets the "repo" edge to the Repo entity by ID if the given value is not nil.
func (_u *RpmPackageUpdate) SetNillableRepoID(id *string) *RpmPackageUpdate {
	if id != nil {
		_u = _u.SetRepoID(*id)
	}
	return _u
}

// SetRepo sets the "repo" edge to the Repo entity.
func (_u *RpmPackageUpdate) SetRepo(v *Repo) *RpmPackageUpdate {
	return _u.SetRepoID(v.ID)
}

// Mutation returns the RpmPackageMutation object of the builder.
func (_u *RpmPackageUpdate) Mutation() *RpmPackageMutation {
	return _u.mutation
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (_u *RpmPackageUpdate) ClearRepo() *RpmPackageUpdate {
	_u.mutation.ClearRepo()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RpmPackageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RpmPackageUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RpmPackageUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RpmPackageUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RpmPackageUpdate) check() error {
	if v, ok := _u.mutation.Epoch(); ok {
		if err := rpmpackage.EpochValidator(v); err != nil {
			return &ValidationError{Name: "epoch", err: fmt.Errorf(`ent: validator failed for field "RpmPackage.epoch": %w`, err)}
		}
	}
	return nil
}

func (_u *RpmPackageUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rpmpackage.Table, rpmpackage.Columns, sqlgraph.NewFieldSpec(rpmpackage.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(rpmpackage.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Epoch(); ok {
		_spec.SetField(rpmpackage.FieldEpoch, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEpoch(); ok {
		_spec.AddField(rpmpackage.FieldEpoch, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(rpmpackage.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Release(); ok {
		_spec.SetField(rpmpackage.FieldRelease, field.TypeString, value)
	}
	if value, ok := _u.mutation.Arch(); ok {
		_spec.SetField(rpmpackage.FieldArch, field.TypeString, value)
	}
	if value, ok := _u.mutation.FilePath(); ok {
		_spec.SetField(rpmpackage.FieldFilePath, field.TypeString, value)
	}
	if _u.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rpmpackage.RepoTable,
			Columns: []string{rpmpackage.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rpmpackage.RepoTable,
			Columns: []string{rpmpackage.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rpmpackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RpmPackageUpdateOne is the builder for updating a single RpmPackage entity.
type RpmPackageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RpmPackageMutation
}

// SetName sets the "name" field.
func (_u *RpmPackageUpdateOne) SetName(v string) *RpmPackageUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RpmPackageUpdateOne) SetNillableName(v *string) *RpmPackageUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEpoch sets the "epoch" field.
func (_u *RpmPackageUpdateOne) SetEpoch(v int) *RpmPackageUpdateOne {
	_u.mutation.ResetEpoch()
	_u.mutation.SetEpoch(v)
	return _u
}

// SetNillableEpoch sets the "epoch" field if the given value is not nil.
func (_u *RpmPackageUpdateOne) SetNillableEpoch(v *int) *RpmPackageUpdateOne {
	if v != nil {
		_u.SetEpoch(*v)
	}
	return _u
}

// AddEpoch adds value to the "epoch" field.
func (_u *RpmPackageUpdateOne) AddEpoch(v int) *RpmPackageUpdateOne {
	_u.mutation.AddEpoch(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *RpmPackageUpdateOne) SetVersion(v string) *RpmPackageUpdateOne {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *RpmPackageUpdateOne) SetNillableVersion(v *string) *RpmPackageUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetRelease sets the "release" field.
func (_u *RpmPackageUpdateOne) SetRelease(v string) *RpmPackageUpdateOne {
	_u.mutation.SetRelease(v)
	return _u
}

// SetNillableRelease sets the "release" field if the given value is not nil.
func (_u *RpmPackageUpdateOne) SetNillableRelease(v *string) *RpmPackageUpdateOne {
	if v != nil {
		_u.SetRelease(*v)
	}
	return _u
}

// SetArch sets the "arch" field.
func (_u *RpmPackageUpdateOne) SetArch(v string) *RpmPackageUpdateOne {
	_u.mutation.SetArch(v)
	return _u
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (_u *RpmPackageUpdateOne) SetNillableArch(v *string) *RpmPackageUpdateOne {
	if v != nil {
		_u.SetArch(*v)
	}
	return _u
}

// SetFilePath sets the "file_path" field.
func (_u *RpmPackageUpdateOne) SetFilePath(v string) *RpmPackageUpdateOne {
	_u.mutation.SetFilePath(v)
	return _u
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (_u *RpmPackageUpdateOne) SetNillableFilePath(v *string) *RpmPackageUpdateOne {
	if v != nil {
		_u.SetFilePath(*v)
	}
	return _u
}

// SetRepoID sets the "repo" edge to the Repo entity by ID.
func (_u *RpmPackageUpdateOne) SetRepoID(id string) *RpmPackageUpdateOne {
	_u.mutation.SetRepoID(id)
	return _u
}

// SetNillableRepoID sets the "repo" edge to the Repo entity by ID if the given value is not nil.
func (_u *RpmPackageUpdateOne) SetNillableRepoID(id *string) *RpmPackageUpdateOne {
	if id != nil {
		_u = _u.SetRepoID(*id)
	}
	return _u
}

// SetRepo sets the "repo" edge to the Repo entity.
func (_u *RpmPackageUpdateOne) SetRepo(v *Repo) *RpmPackageUpdateOne {
	return _u.SetRepoID(v.ID)
}

// Mutation returns the RpmPackageMutation object of the builder.
func (_u *RpmPackageUpdateOne) Mutation() *RpmPackageMutation {
	return _u.mutation
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (_u *RpmPackageUpdateOne) ClearRepo() *RpmPackageUpdateOne {
	_u.mutation.ClearRepo()
	return _u
}

// Where appends a list predicates to the RpmPackageUpdate builder.
func (_u *RpmPackageUpdateOne) Where(ps ...predicate.RpmPackage) *RpmPackageUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RpmPackageUpdateOne) Select(field string, fields ...string) *RpmPackageUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RpmPackage entity.
func (_u *RpmPackageUpdateOne) Save(ctx context.Context) (*RpmPackage, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RpmPackageUpdateOne) SaveX(ctx context.Context) *RpmPackage {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RpmPackageUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RpmPackageUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RpmPackageUpdateOne) check() error {
	if v, ok := _u.mutation.Epoch(); ok {
		if err := rpmpackage.EpochValidator(v); err != nil {
			return &ValidationError{Name: "epoch", err: fmt.Errorf(`ent: validator failed for field "RpmPackage.epoch": %w`, err)}
		}
	}
	return nil
}

func (_u *RpmPackageUpdateOne) sqlSave(ctx context.Context) (_node *RpmPackage, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rpmpackage.Table, rpmpackage.Columns, sqlgraph.NewFieldSpec(rpmpackage.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RpmPackage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rpmpackage.FieldID)
		for _, f := range fields {
			if !rpmpackage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rpmpackage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(rpmpackage.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Epoch(); ok {
		_spec.SetField(rpmpackage.FieldEpoch, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEpoch(); ok {
		_spec.AddField(rpmpackage.FieldEpoch, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(rpmpackage.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Release(); ok {
		_spec.SetField(rpmpackage.FieldRelease, field.TypeString, value)
	}
	if value, ok := _u.mutation.Arch(); ok {
		_spec.SetField(rpmpackage.FieldArch, field.TypeString, value)
	}
	if value, ok := _u.mutation.FilePath(); ok {
		_spec.SetField(rpmpackage.FieldFilePath, field.TypeString, value)
	}
	if _u.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rpmpackage.RepoTable,
			Columns: []string{rpmpackage.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rpmpackage.RepoTable,
			Columns: []string{rpmpackage.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RpmPackage{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rpmpackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
