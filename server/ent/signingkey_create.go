// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FyraLabs/subatomic/server/ent/repo"
	"github.com/FyraLabs/subatomic/server/ent/signingkey"
)

// SigningKeyCreate is the builder for creating a SigningKey entity.
type SigningKeyCreate struct {
	config
	mutation *SigningKeyMutation
	hooks    []Hook
}

// SetPrivateKey sets the "private_key" field.
func (_c *SigningKeyCreate) SetPrivateKey(v string) *SigningKeyCreate {
	_c.mutation.SetPrivateKey(v)
	return _c
}

// SetPublicKey sets the "public_key" field.
func (_c *SigningKeyCreate) SetPublicKey(v string) *SigningKeyCreate {
	_c.mutation.SetPublicKey(v)
	return _c
}

// SetName sets the "name" field.
func (_c *SigningKeyCreate) SetName(v string) *SigningKeyCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetEmail sets the "email" field.
func (_c *SigningKeyCreate) SetEmail(v string) *SigningKeyCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetID sets the "id" field.
func (_c *SigningKeyCreate) SetID(v string) *SigningKeyCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddRepoIDs adds the "repo" edge to the Repo entity by IDs.
func (_c *SigningKeyCreate) AddRepoIDs(ids ...string) *SigningKeyCreate {
	_c.mutation.AddRepoIDs(ids...)
	return _c
}

// AddRepo adds the "repo" edges to the Repo entity.
func (_c *SigningKeyCreate) AddRepo(v ...*Repo) *SigningKeyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRepoIDs(ids...)
}

// Mutation returns the SigningKeyMutation object of the builder.
func (_c *SigningKeyCreate) Mutation() *SigningKeyMutation {
	return _c.mutation
}

// Save creates the SigningKey in the database.
func (_c *SigningKeyCreate) Save(ctx context.Context) (*SigningKey, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SigningKeyCreate) SaveX(ctx context.Context) *SigningKey {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SigningKeyCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SigningKeyCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SigningKeyCreate) check() error {
	if _, ok := _c.mutation.PrivateKey(); !ok {
		return &ValidationError{Name: "private_key", err: errors.New(`ent: missing required field "SigningKey.private_key"`)}
	}
	if _, ok := _c.mutation.PublicKey(); !ok {
		return &ValidationError{Name: "public_key", err: errors.New(`ent: missing required field "SigningKey.public_key"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SigningKey.name"`)}
	}
	if _, ok := _c.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "SigningKey.email"`)}
	}
	return nil
}

func (_c *SigningKeyCreate) sqlSave(ctx context.Context) (*SigningKey, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SigningKey.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SigningKeyCreate) createSpec() (*SigningKey, *sqlgraph.CreateSpec) {
	var (
		_node = &SigningKey{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(signingkey.Table, sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.PrivateKey(); ok {
		_spec.SetField(signingkey.FieldPrivateKey, field.TypeString, value)
		_node.PrivateKey = value
	}
	if value, ok := _c.mutation.PublicKey(); ok {
		_spec.SetField(signingkey.FieldPublicKey, field.TypeString, value)
		_node.PublicKey = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(signingkey.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(signingkey.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if nodes := _c.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   signingkey.RepoTable,
			Columns: []string{signingkey.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SigningKeyCreateBulk is the builder for creating many SigningKey entities in bulk.
type SigningKeyCreateBulk struct {
	config
	err      error
	builders []*SigningKeyCreate
}

// Save creates the SigningKey entities in the database.
func (_c *SigningKeyCreateBulk) Save(ctx context.Context) ([]*SigningKey, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SigningKey, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SigningKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SigningKeyCreateBulk) SaveX(ctx context.Context) []*SigningKey {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SigningKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SigningKeyCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
