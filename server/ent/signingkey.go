// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/FyraLabs/subatomic/server/ent/signingkey"
)

// SigningKey is the model entity for the SigningKey schema.
type SigningKey struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// PrivateKey holds the value of the "private_key" field.
	PrivateKey string `json:"private_key,omitempty"`
	// PublicKey holds the value of the "public_key" field.
	PublicKey string `json:"public_key,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SigningKeyQuery when eager-loading is set.
	Edges        SigningKeyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SigningKeyEdges holds the relations/edges for other nodes in the graph.
type SigningKeyEdges struct {
	// Repo holds the value of the repo edge.
	Repo []*Repo `json:"repo,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RepoOrErr returns the Repo value or an error if the edge
// was not loaded in eager-loading.
func (e SigningKeyEdges) RepoOrErr() ([]*Repo, error) {
	if e.loadedTypes[0] {
		return e.Repo, nil
	}
	return nil, &NotLoadedError{edge: "repo"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SigningKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case signingkey.FieldID, signingkey.FieldPrivateKey, signingkey.FieldPublicKey, signingkey.FieldName, signingkey.FieldEmail:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SigningKey fields.
func (_m *SigningKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case signingkey.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case signingkey.FieldPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_key", values[i])
			} else if value.Valid {
				_m.PrivateKey = value.String
			}
		case signingkey.FieldPublicKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_key", values[i])
			} else if value.Valid {
				_m.PublicKey = value.String
			}
		case signingkey.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case signingkey.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SigningKey.
// This includes values selected through modifiers, order, etc.
func (_m *SigningKey) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryRepo queries the "repo" edge of the SigningKey entity.
func (_m *SigningKey) QueryRepo() *RepoQuery {
	return NewSigningKeyClient(_m.config).QueryRepo(_m)
}

// Update returns a builder for updating this SigningKey.
// Note that you need to call SigningKey.Unwrap() before calling this method if this SigningKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SigningKey) Update() *SigningKeyUpdateOne {
	return NewSigningKeyClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SigningKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SigningKey) Unwrap() *SigningKey {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SigningKey is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SigningKey) String() string {
	var builder strings.Builder
	builder.WriteString("SigningKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("private_key=")
	builder.WriteString(_m.PrivateKey)
	builder.WriteString(", ")
	builder.WriteString("public_key=")
	builder.WriteString(_m.PublicKey)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteByte(')')
	return builder.String()
}

// SigningKeys is a parsable slice of SigningKey.
type SigningKeys []*SigningKey
