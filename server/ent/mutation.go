// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/FyraLabs/subatomic/server/ent/predicate"
	"github.com/FyraLabs/subatomic/server/ent/repo"
	"github.com/FyraLabs/subatomic/server/ent/rpmpackage"
	"github.com/FyraLabs/subatomic/server/ent/signingkey"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRepo       = "Repo"
	TypeRpmPackage = "RpmPackage"
	TypeSigningKey = "SigningKey"
)

// RepoMutation represents an operation that mutates the Repo nodes in the graph.
type RepoMutation struct {
	config
	op            Op
	typ           string
	id            *string
	_type         *repo.Type
	clearedFields map[string]struct{}
	rpms          map[int]struct{}
	removedrpms   map[int]struct{}
	clearedrpms   bool
	key           *string
	clearedkey    bool
	done          bool
	oldValue      func(context.Context) (*Repo, error)
	predicates    []predicate.Repo
}

var _ ent.Mutation = (*RepoMutation)(nil)

// repoOption allows management of the mutation configuration using functional options.
type repoOption func(*RepoMutation)

// newRepoMutation creates new mutation for the Repo entity.
func newRepoMutation(c config, op Op, opts ...repoOption) *RepoMutation {
	m := &RepoMutation{
		config:        c,
		op:            op,
		typ:           TypeRepo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRepoID sets the ID field of the mutation.
func withRepoID(id string) repoOption {
	return func(m *RepoMutation) {
		var (
			err   error
			once  sync.Once
			value *Repo
		)
		m.oldValue = func(ctx context.Context) (*Repo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Repo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRepo sets the old Repo of the mutation.
func withRepo(node *Repo) repoOption {
	return func(m *RepoMutation) {
		m.oldValue = func(context.Context) (*Repo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RepoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RepoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Repo entities.
func (m *RepoMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RepoMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RepoMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Repo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *RepoMutation) SetType(r repo.Type) {
	m._type = &r
}

// GetType returns the value of the "type" field in the mutation.
func (m *RepoMutation) GetType() (r repo.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Repo entity.
// If the Repo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepoMutation) OldType(ctx context.Context) (v repo.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *RepoMutation) ResetType() {
	m._type = nil
}

// AddRpmIDs adds the "rpms" edge to the RpmPackage entity by ids.
func (m *RepoMutation) AddRpmIDs(ids ...int) {
	if m.rpms == nil {
		m.rpms = make(map[int]struct{})
	}
	for i := range ids {
		m.rpms[ids[i]] = struct{}{}
	}
}

// ClearRpms clears the "rpms" edge to the RpmPackage entity.
func (m *RepoMutation) ClearRpms() {
	m.clearedrpms = true
}

// RpmsCleared reports if the "rpms" edge to the RpmPackage entity was cleared.
func (m *RepoMutation) RpmsCleared() bool {
	return m.clearedrpms
}

// RemoveRpmIDs removes the "rpms" edge to the RpmPackage entity by IDs.
func (m *RepoMutation) RemoveRpmIDs(ids ...int) {
	if m.removedrpms == nil {
		m.removedrpms = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rpms, ids[i])
		m.removedrpms[ids[i]] = struct{}{}
	}
}

// RemovedRpms returns the removed IDs of the "rpms" edge to the RpmPackage entity.
func (m *RepoMutation) RemovedRpmsIDs() (ids []int) {
	for id := range m.removedrpms {
		ids = append(ids, id)
	}
	return
}

// RpmsIDs returns the "rpms" edge IDs in the mutation.
func (m *RepoMutation) RpmsIDs() (ids []int) {
	for id := range m.rpms {
		ids = append(ids, id)
	}
	return
}

// ResetRpms resets all changes to the "rpms" edge.
func (m *RepoMutation) ResetRpms() {
	m.rpms = nil
	m.clearedrpms = false
	m.removedrpms = nil
}

// SetKeyID sets the "key" edge to the SigningKey entity by id.
func (m *RepoMutation) SetKeyID(id string) {
	m.key = &id
}

// ClearKey clears the "key" edge to the SigningKey entity.
func (m *RepoMutation) ClearKey() {
	m.clearedkey = true
}

// KeyCleared reports if the "key" edge to the SigningKey entity was cleared.
func (m *RepoMutation) KeyCleared() bool {
	return m.clearedkey
}

// KeyID returns the "key" edge ID in the mutation.
func (m *RepoMutation) KeyID() (id string, exists bool) {
	if m.key != nil {
		return *m.key, true
	}
	return
}

// KeyIDs returns the "key" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// KeyID instead. It exists only for internal usage by the builders.
func (m *RepoMutation) KeyIDs() (ids []string) {
	if id := m.key; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetKey resets all changes to the "key" edge.
func (m *RepoMutation) ResetKey() {
	m.key = nil
	m.clearedkey = false
}

// Where appends a list predicates to the RepoMutation builder.
func (m *RepoMutation) Where(ps ...predicate.Repo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RepoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Repo).
func (m *RepoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RepoMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._type != nil {
		fields = append(fields, repo.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RepoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case repo.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RepoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case repo.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Repo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case repo.FieldType:
		v, ok := value.(repo.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Repo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RepoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RepoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Repo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RepoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RepoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RepoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Repo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RepoMutation) ResetField(name string) error {
	switch name {
	case repo.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Repo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RepoMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.rpms != nil {
		edges = append(edges, repo.EdgeRpms)
	}
	if m.key != nil {
		edges = append(edges, repo.EdgeKey)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RepoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case repo.EdgeRpms:
		ids := make([]ent.Value, 0, len(m.rpms))
		for id := range m.rpms {
			ids = append(ids, id)
		}
		return ids
	case repo.EdgeKey:
		if id := m.key; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RepoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrpms != nil {
		edges = append(edges, repo.EdgeRpms)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RepoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case repo.EdgeRpms:
		ids := make([]ent.Value, 0, len(m.removedrpms))
		for id := range m.removedrpms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RepoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrpms {
		edges = append(edges, repo.EdgeRpms)
	}
	if m.clearedkey {
		edges = append(edges, repo.EdgeKey)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RepoMutation) EdgeCleared(name string) bool {
	switch name {
	case repo.EdgeRpms:
		return m.clearedrpms
	case repo.EdgeKey:
		return m.clearedkey
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RepoMutation) ClearEdge(name string) error {
	switch name {
	case repo.EdgeKey:
		m.ClearKey()
		return nil
	}
	return fmt.Errorf("unknown Repo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RepoMutation) ResetEdge(name string) error {
	switch name {
	case repo.EdgeRpms:
		m.ResetRpms()
		return nil
	case repo.EdgeKey:
		m.ResetKey()
		return nil
	}
	return fmt.Errorf("unknown Repo edge %s", name)
}

// RpmPackageMutation represents an operation that mutates the RpmPackage nodes in the graph.
type RpmPackageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	epoch         *int
	addepoch      *int
	version       *string
	release       *string
	arch          *string
	file_path     *string
	clearedFields map[string]struct{}
	repo          *string
	clearedrepo   bool
	done          bool
	oldValue      func(context.Context) (*RpmPackage, error)
	predicates    []predicate.RpmPackage
}

var _ ent.Mutation = (*RpmPackageMutation)(nil)

// rpmpackageOption allows management of the mutation configuration using functional options.
type rpmpackageOption func(*RpmPackageMutation)

// newRpmPackageMutation creates new mutation for the RpmPackage entity.
func newRpmPackageMutation(c config, op Op, opts ...rpmpackageOption) *RpmPackageMutation {
	m := &RpmPackageMutation{
		config:        c,
		op:            op,
		typ:           TypeRpmPackage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRpmPackageID sets the ID field of the mutation.
func withRpmPackageID(id int) rpmpackageOption {
	return func(m *RpmPackageMutation) {
		var (
			err   error
			once  sync.Once
			value *RpmPackage
		)
		m.oldValue = func(ctx context.Context) (*RpmPackage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RpmPackage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRpmPackage sets the old RpmPackage of the mutation.
func withRpmPackage(node *RpmPackage) rpmpackageOption {
	return func(m *RpmPackageMutation) {
		m.oldValue = func(context.Context) (*RpmPackage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RpmPackageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RpmPackageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RpmPackageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RpmPackageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RpmPackage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RpmPackageMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RpmPackageMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the RpmPackage entity.
// If the RpmPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RpmPackageMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RpmPackageMutation) ResetName() {
	m.name = nil
}

// SetEpoch sets the "epoch" field.
func (m *RpmPackageMutation) SetEpoch(i int) {
	m.epoch = &i
	m.addepoch = nil
}

// Epoch returns the value of the "epoch" field in the mutation.
func (m *RpmPackageMutation) Epoch() (r int, exists bool) {
	v := m.epoch
	if v == nil {
		return
	}
	return *v, true
}

// OldEpoch returns the old "epoch" field's value of the RpmPackage entity.
// If the RpmPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RpmPackageMutation) OldEpoch(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEpoch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEpoch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEpoch: %w", err)
	}
	return oldValue.Epoch, nil
}

// AddEpoch adds i to the "epoch" field.
func (m *RpmPackageMutation) AddEpoch(i int) {
	if m.addepoch != nil {
		*m.addepoch += i
	} else {
		m.addepoch = &i
	}
}

// AddedEpoch returns the value that was added to the "epoch" field in this mutation.
func (m *RpmPackageMutation) AddedEpoch() (r int, exists bool) {
	v := m.addepoch
	if v == nil {
		return
	}
	return *v, true
}

// ResetEpoch resets all changes to the "epoch" field.
func (m *RpmPackageMutation) ResetEpoch() {
	m.epoch = nil
	m.addepoch = nil
}

// SetVersion sets the "version" field.
func (m *RpmPackageMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *RpmPackageMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the RpmPackage entity.
// If the RpmPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RpmPackageMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *RpmPackageMutation) ResetVersion() {
	m.version = nil
}

// SetRelease sets the "release" field.
func (m *RpmPackageMutation) SetRelease(s string) {
	m.release = &s
}

// Release returns the value of the "release" field in the mutation.
func (m *RpmPackageMutation) Release() (r string, exists bool) {
	v := m.release
	if v == nil {
		return
	}
	return *v, true
}

// OldRelease returns the old "release" field's value of the RpmPackage entity.
// If the RpmPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RpmPackageMutation) OldRelease(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelease is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelease requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelease: %w", err)
	}
	return oldValue.Release, nil
}

// ResetRelease resets all changes to the "release" field.
func (m *RpmPackageMutation) ResetRelease() {
	m.release = nil
}

// SetArch sets the "arch" field.
func (m *RpmPackageMutation) SetArch(s string) {
	m.arch = &s
}

// Arch returns the value of the "arch" field in the mutation.
func (m *RpmPackageMutation) Arch() (r string, exists bool) {
	v := m.arch
	if v == nil {
		return
	}
	return *v, true
}

// OldArch returns the old "arch" field's value of the RpmPackage entity.
// If the RpmPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RpmPackageMutation) OldArch(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArch: %w", err)
	}
	return oldValue.Arch, nil
}

// ResetArch resets all changes to the "arch" field.
func (m *RpmPackageMutation) ResetArch() {
	m.arch = nil
}

// SetFilePath sets the "file_path" field.
func (m *RpmPackageMutation) SetFilePath(s string) {
	m.file_path = &s
}

// FilePath returns the value of the "file_path" field in the mutation.
func (m *RpmPackageMutation) FilePath() (r string, exists bool) {
	v := m.file_path
	if v == nil {
		return
	}
	return *v, true
}

// OldFilePath returns the old "file_path" field's value of the RpmPackage entity.
// If the RpmPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RpmPackageMutation) OldFilePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilePath: %w", err)
	}
	return oldValue.FilePath, nil
}

// ResetFilePath resets all changes to the "file_path" field.
func (m *RpmPackageMutation) ResetFilePath() {
	m.file_path = nil
}

// SetRepoID sets the "repo" edge to the Repo entity by id.
func (m *RpmPackageMutation) SetRepoID(id string) {
	m.repo = &id
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (m *RpmPackageMutation) ClearRepo() {
	m.clearedrepo = true
}

// RepoCleared reports if the "repo" edge to the Repo entity was cleared.
func (m *RpmPackageMutation) RepoCleared() bool {
	return m.clearedrepo
}

// RepoID returns the "repo" edge ID in the mutation.
func (m *RpmPackageMutation) RepoID() (id string, exists bool) {
	if m.repo != nil {
		return *m.repo, true
	}
	return
}

// RepoIDs returns the "repo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepoID instead. It exists only for internal usage by the builders.
func (m *RpmPackageMutation) RepoIDs() (ids []string) {
	if id := m.repo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepo resets all changes to the "repo" edge.
func (m *RpmPackageMutation) ResetRepo() {
	m.repo = nil
	m.clearedrepo = false
}

// Where appends a list predicates to the RpmPackageMutation builder.
func (m *RpmPackageMutation) Where(ps ...predicate.RpmPackage) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RpmPackageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RpmPackage).
func (m *RpmPackageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RpmPackageMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, rpmpackage.FieldName)
	}
	if m.epoch != nil {
		fields = append(fields, rpmpackage.FieldEpoch)
	}
	if m.version != nil {
		fields = append(fields, rpmpackage.FieldVersion)
	}
	if m.release != nil {
		fields = append(fields, rpmpackage.FieldRelease)
	}
	if m.arch != nil {
		fields = append(fields, rpmpackage.FieldArch)
	}
	if m.file_path != nil {
		fields = append(fields, rpmpackage.FieldFilePath)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RpmPackageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rpmpackage.FieldName:
		return m.Name()
	case rpmpackage.FieldEpoch:
		return m.Epoch()
	case rpmpackage.FieldVersion:
		return m.Version()
	case rpmpackage.FieldRelease:
		return m.Release()
	case rpmpackage.FieldArch:
		return m.Arch()
	case rpmpackage.FieldFilePath:
		return m.FilePath()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RpmPackageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rpmpackage.FieldName:
		return m.OldName(ctx)
	case rpmpackage.FieldEpoch:
		return m.OldEpoch(ctx)
	case rpmpackage.FieldVersion:
		return m.OldVersion(ctx)
	case rpmpackage.FieldRelease:
		return m.OldRelease(ctx)
	case rpmpackage.FieldArch:
		return m.OldArch(ctx)
	case rpmpackage.FieldFilePath:
		return m.OldFilePath(ctx)
	}
	return nil, fmt.Errorf("unknown RpmPackage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RpmPackageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rpmpackage.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rpmpackage.FieldEpoch:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEpoch(v)
		return nil
	case rpmpackage.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case rpmpackage.FieldRelease:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelease(v)
		return nil
	case rpmpackage.FieldArch:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArch(v)
		return nil
	case rpmpackage.FieldFilePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilePath(v)
		return nil
	}
	return fmt.Errorf("unknown RpmPackage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RpmPackageMutation) AddedFields() []string {
	var fields []string
	if m.addepoch != nil {
		fields = append(fields, rpmpackage.FieldEpoch)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RpmPackageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rpmpackage.FieldEpoch:
		return m.AddedEpoch()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RpmPackageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rpmpackage.FieldEpoch:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEpoch(v)
		return nil
	}
	return fmt.Errorf("unknown RpmPackage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RpmPackageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RpmPackageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RpmPackageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RpmPackage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RpmPackageMutation) ResetField(name string) error {
	switch name {
	case rpmpackage.FieldName:
		m.ResetName()
		return nil
	case rpmpackage.FieldEpoch:
		m.ResetEpoch()
		return nil
	case rpmpackage.FieldVersion:
		m.ResetVersion()
		return nil
	case rpmpackage.FieldRelease:
		m.ResetRelease()
		return nil
	case rpmpackage.FieldArch:
		m.ResetArch()
		return nil
	case rpmpackage.FieldFilePath:
		m.ResetFilePath()
		return nil
	}
	return fmt.Errorf("unknown RpmPackage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RpmPackageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.repo != nil {
		edges = append(edges, rpmpackage.EdgeRepo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RpmPackageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rpmpackage.EdgeRepo:
		if id := m.repo; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RpmPackageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RpmPackageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RpmPackageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrepo {
		edges = append(edges, rpmpackage.EdgeRepo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RpmPackageMutation) EdgeCleared(name string) bool {
	switch name {
	case rpmpackage.EdgeRepo:
		return m.clearedrepo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RpmPackageMutation) ClearEdge(name string) error {
	switch name {
	case rpmpackage.EdgeRepo:
		m.ClearRepo()
		return nil
	}
	return fmt.Errorf("unknown RpmPackage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RpmPackageMutation) ResetEdge(name string) error {
	switch name {
	case rpmpackage.EdgeRepo:
		m.ResetRepo()
		return nil
	}
	return fmt.Errorf("unknown RpmPackage edge %s", name)
}

// SigningKeyMutation represents an operation that mutates the SigningKey nodes in the graph.
type SigningKeyMutation struct {
	config
	op            Op
	typ           string
	id            *string
	private_key   *string
	public_key    *string
	name          *string
	email         *string
	clearedFields map[string]struct{}
	repo          map[string]struct{}
	removedrepo   map[string]struct{}
	clearedrepo   bool
	done          bool
	oldValue      func(context.Context) (*SigningKey, error)
	predicates    []predicate.SigningKey
}

var _ ent.Mutation = (*SigningKeyMutation)(nil)

// signingkeyOption allows management of the mutation configuration using functional options.
type signingkeyOption func(*SigningKeyMutation)

// newSigningKeyMutation creates new mutation for the SigningKey entity.
func newSigningKeyMutation(c config, op Op, opts ...signingkeyOption) *SigningKeyMutation {
	m := &SigningKeyMutation{
		config:        c,
		op:            op,
		typ:           TypeSigningKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSigningKeyID sets the ID field of the mutation.
func withSigningKeyID(id string) signingkeyOption {
	return func(m *SigningKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *SigningKey
		)
		m.oldValue = func(ctx context.Context) (*SigningKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SigningKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSigningKey sets the old SigningKey of the mutation.
func withSigningKey(node *SigningKey) signingkeyOption {
	return func(m *SigningKeyMutation) {
		m.oldValue = func(context.Context) (*SigningKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SigningKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SigningKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SigningKey entities.
func (m *SigningKeyMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SigningKeyMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SigningKeyMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SigningKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrivateKey sets the "private_key" field.
func (m *SigningKeyMutation) SetPrivateKey(s string) {
	m.private_key = &s
}

// PrivateKey returns the value of the "private_key" field in the mutation.
func (m *SigningKeyMutation) PrivateKey() (r string, exists bool) {
	v := m.private_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivateKey returns the old "private_key" field's value of the SigningKey entity.
// If the SigningKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SigningKeyMutation) OldPrivateKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivateKey: %w", err)
	}
	return oldValue.PrivateKey, nil
}

// ResetPrivateKey resets all changes to the "private_key" field.
func (m *SigningKeyMutation) ResetPrivateKey() {
	m.private_key = nil
}

// SetPublicKey sets the "public_key" field.
func (m *SigningKeyMutation) SetPublicKey(s string) {
	m.public_key = &s
}

// PublicKey returns the value of the "public_key" field in the mutation.
func (m *SigningKeyMutation) PublicKey() (r string, exists bool) {
	v := m.public_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicKey returns the old "public_key" field's value of the SigningKey entity.
// If the SigningKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SigningKeyMutation) OldPublicKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicKey: %w", err)
	}
	return oldValue.PublicKey, nil
}

// ResetPublicKey resets all changes to the "public_key" field.
func (m *SigningKeyMutation) ResetPublicKey() {
	m.public_key = nil
}

// SetName sets the "name" field.
func (m *SigningKeyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SigningKeyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SigningKey entity.
// If the SigningKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SigningKeyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SigningKeyMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *SigningKeyMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *SigningKeyMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the SigningKey entity.
// If the SigningKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SigningKeyMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *SigningKeyMutation) ResetEmail() {
	m.email = nil
}

// AddRepoIDs adds the "repo" edge to the Repo entity by ids.
func (m *SigningKeyMutation) AddRepoIDs(ids ...string) {
	if m.repo == nil {
		m.repo = make(map[string]struct{})
	}
	for i := range ids {
		m.repo[ids[i]] = struct{}{}
	}
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (m *SigningKeyMutation) ClearRepo() {
	m.clearedrepo = true
}

// RepoCleared reports if the "repo" edge to the Repo entity was cleared.
func (m *SigningKeyMutation) RepoCleared() bool {
	return m.clearedrepo
}

// RemoveRepoIDs removes the "repo" edge to the Repo entity by IDs.
func (m *SigningKeyMutation) RemoveRepoIDs(ids ...string) {
	if m.removedrepo == nil {
		m.removedrepo = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.repo, ids[i])
		m.removedrepo[ids[i]] = struct{}{}
	}
}

// RemovedRepo returns the removed IDs of the "repo" edge to the Repo entity.
func (m *SigningKeyMutation) RemovedRepoIDs() (ids []string) {
	for id := range m.removedrepo {
		ids = append(ids, id)
	}
	return
}

// RepoIDs returns the "repo" edge IDs in the mutation.
func (m *SigningKeyMutation) RepoIDs() (ids []string) {
	for id := range m.repo {
		ids = append(ids, id)
	}
	return
}

// ResetRepo resets all changes to the "repo" edge.
func (m *SigningKeyMutation) ResetRepo() {
	m.repo = nil
	m.clearedrepo = false
	m.removedrepo = nil
}

// Where appends a list predicates to the SigningKeyMutation builder.
func (m *SigningKeyMutation) Where(ps ...predicate.SigningKey) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SigningKeyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SigningKey).
func (m *SigningKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SigningKeyMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.private_key != nil {
		fields = append(fields, signingkey.FieldPrivateKey)
	}
	if m.public_key != nil {
		fields = append(fields, signingkey.FieldPublicKey)
	}
	if m.name != nil {
		fields = append(fields, signingkey.FieldName)
	}
	if m.email != nil {
		fields = append(fields, signingkey.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SigningKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case signingkey.FieldPrivateKey:
		return m.PrivateKey()
	case signingkey.FieldPublicKey:
		return m.PublicKey()
	case signingkey.FieldName:
		return m.Name()
	case signingkey.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SigningKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case signingkey.FieldPrivateKey:
		return m.OldPrivateKey(ctx)
	case signingkey.FieldPublicKey:
		return m.OldPublicKey(ctx)
	case signingkey.FieldName:
		return m.OldName(ctx)
	case signingkey.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown SigningKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SigningKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case signingkey.FieldPrivateKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivateKey(v)
		return nil
	case signingkey.FieldPublicKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicKey(v)
		return nil
	case signingkey.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case signingkey.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown SigningKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SigningKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SigningKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SigningKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SigningKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SigningKeyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SigningKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SigningKeyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SigningKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SigningKeyMutation) ResetField(name string) error {
	switch name {
	case signingkey.FieldPrivateKey:
		m.ResetPrivateKey()
		return nil
	case signingkey.FieldPublicKey:
		m.ResetPublicKey()
		return nil
	case signingkey.FieldName:
		m.ResetName()
		return nil
	case signingkey.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown SigningKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SigningKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.repo != nil {
		edges = append(edges, signingkey.EdgeRepo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SigningKeyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case signingkey.EdgeRepo:
		ids := make([]ent.Value, 0, len(m.repo))
		for id := range m.repo {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SigningKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrepo != nil {
		edges = append(edges, signingkey.EdgeRepo)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SigningKeyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case signingkey.EdgeRepo:
		ids := make([]ent.Value, 0, len(m.removedrepo))
		for id := range m.removedrepo {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SigningKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrepo {
		edges = append(edges, signingkey.EdgeRepo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SigningKeyMutation) EdgeCleared(name string) bool {
	switch name {
	case signingkey.EdgeRepo:
		return m.clearedrepo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SigningKeyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SigningKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SigningKeyMutation) ResetEdge(name string) error {
	switch name {
	case signingkey.EdgeRepo:
		m.ResetRepo()
		return nil
	}
	return fmt.Errorf("unknown SigningKey edge %s", name)
}
