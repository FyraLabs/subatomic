// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FyraLabs/subatomic/server/ent/predicate"
	"github.com/FyraLabs/subatomic/server/ent/repo"
	"github.com/FyraLabs/subatomic/server/ent/rpmpackage"
	"github.com/FyraLabs/subatomic/server/ent/signingkey"
)

// RepoUpdate is the builder for updating Repo entities.
type RepoUpdate struct {
	config
	hooks    []Hook
	mutation *RepoMutation
}

// Where appends a list predicates to the RepoUpdate builder.
func (_u *RepoUpdate) Where(ps ...predicate.Repo) *RepoUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetType sets the "type" field.
func (_u *RepoUpdate) SetType(v repo.Type) *RepoUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *RepoUpdate) SetNillableType(v *repo.Type) *RepoUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetTetsudouURL sets the "tetsudou_url" field.
func (_u *RepoUpdate) SetTetsudouURL(v string) *RepoUpdate {
	_u.mutation.SetTetsudouURL(v)
	return _u
}

// SetNillableTetsudouURL sets the "tetsudou_url" field if the given value is not nil.
func (_u *RepoUpdate) SetNillableTetsudouURL(v *string) *RepoUpdate {
	if v != nil {
		_u.SetTetsudouURL(*v)
	}
	return _u
}

// ClearTetsudouURL clears the value of the "tetsudou_url" field.
func (_u *RepoUpdate) ClearTetsudouURL() *RepoUpdate {
	_u.mutation.ClearTetsudouURL()
	return _u
}

// SetTetsudouToken sets the "tetsudou_token" field.
func (_u *RepoUpdate) SetTetsudouToken(v string) *RepoUpdate {
	_u.mutation.SetTetsudouToken(v)
	return _u
}

// SetNillableTetsudouToken sets the "tetsudou_token" field if the given value is not nil.
func (_u *RepoUpdate) SetNillableTetsudouToken(v *string) *RepoUpdate {
	if v != nil {
		_u.SetTetsudouToken(*v)
	}
	return _u
}

// ClearTetsudouToken clears the value of the "tetsudou_token" field.
func (_u *RepoUpdate) ClearTetsudouToken() *RepoUpdate {
	_u.mutation.ClearTetsudouToken()
	return _u
}

// AddRpmIDs adds the "rpms" edge to the RpmPackage entity by IDs.
func (_u *RepoUpdate) AddRpmIDs(ids ...int) *RepoUpdate {
	_u.mutation.AddRpmIDs(ids...)
	return _u
}

// AddRpms adds the "rpms" edges to the RpmPackage entity.
func (_u *RepoUpdate) AddRpms(v ...*RpmPackage) *RepoUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRpmIDs(ids...)
}

// SetKeyID sets the "key" edge to the SigningKey entity by ID.
func (_u *RepoUpdate) SetKeyID(id string) *RepoUpdate {
	_u.mutation.SetKeyID(id)
	return _u
}

// SetNillableKeyID sets the "key" edge to the SigningKey entity by ID if the given value is not nil.
func (_u *RepoUpdate) SetNillableKeyID(id *string) *RepoUpdate {
	if id != nil {
		_u = _u.SetKeyID(*id)
	}
	return _u
}

// SetKey sets the "key" edge to the SigningKey entity.
func (_u *RepoUpdate) SetKey(v *SigningKey) *RepoUpdate {
	return _u.SetKeyID(v.ID)
}

// Mutation returns the RepoMutation object of the builder.
func (_u *RepoUpdate) Mutation() *RepoMutation {
	return _u.mutation
}

// ClearRpms clears all "rpms" edges to the RpmPackage entity.
func (_u *RepoUpdate) ClearRpms() *RepoUpdate {
	_u.mutation.ClearRpms()
	return _u
}

// RemoveRpmIDs removes the "rpms" edge to RpmPackage entities by IDs.
func (_u *RepoUpdate) RemoveRpmIDs(ids ...int) *RepoUpdate {
	_u.mutation.RemoveRpmIDs(ids...)
	return _u
}

// RemoveRpms removes "rpms" edges to RpmPackage entities.
func (_u *RepoUpdate) RemoveRpms(v ...*RpmPackage) *RepoUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRpmIDs(ids...)
}

// ClearKey clears the "key" edge to the SigningKey entity.
func (_u *RepoUpdate) ClearKey() *RepoUpdate {
	_u.mutation.ClearKey()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RepoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RepoUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RepoUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RepoUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RepoUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := repo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Repo.type": %w`, err)}
		}
	}
	return nil
}

func (_u *RepoUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repo.Table, repo.Columns, sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(repo.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.TetsudouURL(); ok {
		_spec.SetField(repo.FieldTetsudouURL, field.TypeString, value)
	}
	if _u.mutation.TetsudouURLCleared() {
		_spec.ClearField(repo.FieldTetsudouURL, field.TypeString)
	}
	if value, ok := _u.mutation.TetsudouToken(); ok {
		_spec.SetField(repo.FieldTetsudouToken, field.TypeString, value)
	}
	if _u.mutation.TetsudouTokenCleared() {
		_spec.ClearField(repo.FieldTetsudouToken, field.TypeString)
	}
	if _u.mutation.RpmsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.RpmsTable,
			Columns: []string{repo.RpmsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rpmpackage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRpmsIDs(); len(nodes) > 0 && !_u.mutation.RpmsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.RpmsTable,
			Columns: []string{repo.RpmsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rpmpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RpmsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.RpmsTable,
			Columns: []string{repo.RpmsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rpmpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.KeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repo.KeyTable,
			Columns: []string{repo.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.KeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repo.KeyTable,
			Columns: []string{repo.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RepoUpdateOne is the builder for updating a single Repo entity.
type RepoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepoMutation
}

// SetType sets the "type" field.
func (_u *RepoUpdateOne) SetType(v repo.Type) *RepoUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *RepoUpdateOne) SetNillableType(v *repo.Type) *RepoUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetTetsudouURL sets the "tetsudou_url" field.
func (_u *RepoUpdateOne) SetTetsudouURL(v string) *RepoUpdateOne {
	_u.mutation.SetTetsudouURL(v)
	return _u
}

// SetNillableTetsudouURL sets the "tetsudou_url" field if the given value is not nil.
func (_u *RepoUpdateOne) SetNillableTetsudouURL(v *string) *RepoUpdateOne {
	if v != nil {
		_u.SetTetsudouURL(*v)
	}
	return _u
}

// ClearTetsudouURL clears the value of the "tetsudou_url" field.
func (_u *RepoUpdateOne) ClearTetsudouURL() *RepoUpdateOne {
	_u.mutation.ClearTetsudouURL()
	return _u
}

// SetTetsudouToken sets the "tetsudou_token" field.
func (_u *RepoUpdateOne) SetTetsudouToken(v string) *RepoUpdateOne {
	_u.mutation.SetTetsudouToken(v)
	return _u
}

// SetNillableTetsudouToken sets the "tetsudou_token" field if the given value is not nil.
func (_u *RepoUpdateOne) SetNillableTetsudouToken(v *string) *RepoUpdateOne {
	if v != nil {
		_u.SetTetsudouToken(*v)
	}
	return _u
}

// ClearTetsudouToken clears the value of the "tetsudou_token" field.
func (_u *RepoUpdateOne) ClearTetsudouToken() *RepoUpdateOne {
	_u.mutation.ClearTetsudouToken()
	return _u
}

// AddRpmIDs adds the "rpms" edge to the RpmPackage entity by IDs.
func (_u *RepoUpdateOne) AddRpmIDs(ids ...int) *RepoUpdateOne {
	_u.mutation.AddRpmIDs(ids...)
	return _u
}

// AddRpms adds the "rpms" edges to the RpmPackage entity.
func (_u *RepoUpdateOne) AddRpms(v ...*RpmPackage) *RepoUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRpmIDs(ids...)
}

// SetKeyID sets the "key" edge to the SigningKey entity by ID.
func (_u *RepoUpdateOne) SetKeyID(id string) *RepoUpdateOne {
	_u.mutation.SetKeyID(id)
	return _u
}

// SetNillableKeyID sets the "key" edge to the SigningKey entity by ID if the given value is not nil.
func (_u *RepoUpdateOne) SetNillableKeyID(id *string) *RepoUpdateOne {
	if id != nil {
		_u = _u.SetKeyID(*id)
	}
	return _u
}

// SetKey sets the "key" edge to the SigningKey entity.
func (_u *RepoUpdateOne) SetKey(v *SigningKey) *RepoUpdateOne {
	return _u.SetKeyID(v.ID)
}

// Mutation returns the RepoMutation object of the builder.
func (_u *RepoUpdateOne) Mutation() *RepoMutation {
	return _u.mutation
}

// ClearRpms clears all "rpms" edges to the RpmPackage entity.
func (_u *RepoUpdateOne) ClearRpms() *RepoUpdateOne {
	_u.mutation.ClearRpms()
	return _u
}

// RemoveRpmIDs removes the "rpms" edge to RpmPackage entities by IDs.
func (_u *RepoUpdateOne) RemoveRpmIDs(ids ...int) *RepoUpdateOne {
	_u.mutation.RemoveRpmIDs(ids...)
	return _u
}

// RemoveRpms removes "rpms" edges to RpmPackage entities.
func (_u *RepoUpdateOne) RemoveRpms(v ...*RpmPackage) *RepoUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRpmIDs(ids...)
}

// ClearKey clears the "key" edge to the SigningKey entity.
func (_u *RepoUpdateOne) ClearKey() *RepoUpdateOne {
	_u.mutation.ClearKey()
	return _u
}

// Where appends a list predicates to the RepoUpdate builder.
func (_u *RepoUpdateOne) Where(ps ...predicate.Repo) *RepoUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RepoUpdateOne) Select(field string, fields ...string) *RepoUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Repo entity.
func (_u *RepoUpdateOne) Save(ctx context.Context) (*Repo, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RepoUpdateOne) SaveX(ctx context.Context) *Repo {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RepoUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RepoUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RepoUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := repo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Repo.type": %w`, err)}
		}
	}
	return nil
}

func (_u *RepoUpdateOne) sqlSave(ctx context.Context) (_node *Repo, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repo.Table, repo.Columns, sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Repo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repo.FieldID)
		for _, f := range fields {
			if !repo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(repo.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.TetsudouURL(); ok {
		_spec.SetField(repo.FieldTetsudouURL, field.TypeString, value)
	}
	if _u.mutation.TetsudouURLCleared() {
		_spec.ClearField(repo.FieldTetsudouURL, field.TypeString)
	}
	if value, ok := _u.mutation.TetsudouToken(); ok {
		_spec.SetField(repo.FieldTetsudouToken, field.TypeString, value)
	}
	if _u.mutation.TetsudouTokenCleared() {
		_spec.ClearField(repo.FieldTetsudouToken, field.TypeString)
	}
	if _u.mutation.RpmsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.RpmsTable,
			Columns: []string{repo.RpmsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rpmpackage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRpmsIDs(); len(nodes) > 0 && !_u.mutation.RpmsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.RpmsTable,
			Columns: []string{repo.RpmsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rpmpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RpmsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.RpmsTable,
			Columns: []string{repo.RpmsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rpmpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.KeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repo.KeyTable,
			Columns: []string{repo.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.KeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repo.KeyTable,
			Columns: []string{repo.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Repo{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
