// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FyraLabs/subatomic/server/ent/predicate"
	"github.com/FyraLabs/subatomic/server/ent/repo"
	"github.com/FyraLabs/subatomic/server/ent/rpmpackage"
)

// RpmPackageQuery is the builder for querying RpmPackage entities.
type RpmPackageQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.RpmPackage
	withRepo   *RepoQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RpmPackageQuery builder.
func (rpq *RpmPackageQuery) Where(ps ...predicate.RpmPackage) *RpmPackageQuery {
	rpq.predicates = append(rpq.predicates, ps...)
	return rpq
}

// Limit adds a limit step to the query.
func (rpq *RpmPackageQuery) Limit(limit int) *RpmPackageQuery {
	rpq.limit = &limit
	return rpq
}

// Offset adds an offset step to the query.
func (rpq *RpmPackageQuery) Offset(offset int) *RpmPackageQuery {
	rpq.offset = &offset
	return rpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rpq *RpmPackageQuery) Unique(unique bool) *RpmPackageQuery {
	rpq.unique = &unique
	return rpq
}

// Order adds an order step to the query.
func (rpq *RpmPackageQuery) Order(o ...OrderFunc) *RpmPackageQuery {
	rpq.order = append(rpq.order, o...)
	return rpq
}

// QueryRepo chains the current query on the "repo" edge.
func (rpq *RpmPackageQuery) QueryRepo() *RepoQuery {
	query := &RepoQuery{config: rpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rpmpackage.Table, rpmpackage.FieldID, selector),
			sqlgraph.To(repo.Table, repo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rpmpackage.RepoTable, rpmpackage.RepoColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RpmPackage entity from the query.
// Returns a *NotFoundError when no RpmPackage was found.
func (rpq *RpmPackageQuery) First(ctx context.Context) (*RpmPackage, error) {
	nodes, err := rpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{rpmpackage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rpq *RpmPackageQuery) FirstX(ctx context.Context) *RpmPackage {
	node, err := rpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RpmPackage ID from the query.
// Returns a *NotFoundError when no RpmPackage ID was found.
func (rpq *RpmPackageQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rpq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{rpmpackage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rpq *RpmPackageQuery) FirstIDX(ctx context.Context) int {
	id, err := rpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RpmPackage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RpmPackage entity is found.
// Returns a *NotFoundError when no RpmPackage entities are found.
func (rpq *RpmPackageQuery) Only(ctx context.Context) (*RpmPackage, error) {
	nodes, err := rpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{rpmpackage.Label}
	default:
		return nil, &NotSingularError{rpmpackage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rpq *RpmPackageQuery) OnlyX(ctx context.Context) *RpmPackage {
	node, err := rpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RpmPackage ID in the query.
// Returns a *NotSingularError when more than one RpmPackage ID is found.
// Returns a *NotFoundError when no entities are found.
func (rpq *RpmPackageQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rpq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{rpmpackage.Label}
	default:
		err = &NotSingularError{rpmpackage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rpq *RpmPackageQuery) OnlyIDX(ctx context.Context) int {
	id, err := rpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RpmPackages.
func (rpq *RpmPackageQuery) All(ctx context.Context) ([]*RpmPackage, error) {
	if err := rpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rpq *RpmPackageQuery) AllX(ctx context.Context) []*RpmPackage {
	nodes, err := rpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RpmPackage IDs.
func (rpq *RpmPackageQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rpq.Select(rpmpackage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rpq *RpmPackageQuery) IDsX(ctx context.Context) []int {
	ids, err := rpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rpq *RpmPackageQuery) Count(ctx context.Context) (int, error) {
	if err := rpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rpq *RpmPackageQuery) CountX(ctx context.Context) int {
	count, err := rpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rpq *RpmPackageQuery) Exist(ctx context.Context) (bool, error) {
	if err := rpq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rpq *RpmPackageQuery) ExistX(ctx context.Context) bool {
	exist, err := rpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RpmPackageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rpq *RpmPackageQuery) Clone() *RpmPackageQuery {
	if rpq == nil {
		return nil
	}
	return &RpmPackageQuery{
		config:     rpq.config,
		limit:      rpq.limit,
		offset:     rpq.offset,
		order:      append([]OrderFunc{}, rpq.order...),
		predicates: append([]predicate.RpmPackage{}, rpq.predicates...),
		withRepo:   rpq.withRepo.Clone(),
		// clone intermediate query.
		sql:    rpq.sql.Clone(),
		path:   rpq.path,
		unique: rpq.unique,
	}
}

// WithRepo tells the query-builder to eager-load the nodes that are connected to
// the "repo" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *RpmPackageQuery) WithRepo(opts ...func(*RepoQuery)) *RpmPackageQuery {
	query := &RepoQuery{config: rpq.config}
	for _, opt := range opts {
		opt(query)
	}
	rpq.withRepo = query
	return rpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RpmPackage.Query().
//		GroupBy(rpmpackage.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rpq *RpmPackageQuery) GroupBy(field string, fields ...string) *RpmPackageGroupBy {
	grbuild := &RpmPackageGroupBy{config: rpq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rpq.sqlQuery(ctx), nil
	}
	grbuild.label = rpmpackage.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.RpmPackage.Query().
//		Select(rpmpackage.FieldName).
//		Scan(ctx, &v)
func (rpq *RpmPackageQuery) Select(fields ...string) *RpmPackageSelect {
	rpq.fields = append(rpq.fields, fields...)
	selbuild := &RpmPackageSelect{RpmPackageQuery: rpq}
	selbuild.label = rpmpackage.Label
	selbuild.flds, selbuild.scan = &rpq.fields, selbuild.Scan
	return selbuild
}

func (rpq *RpmPackageQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rpq.fields {
		if !rpmpackage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rpq.path != nil {
		prev, err := rpq.path(ctx)
		if err != nil {
			return err
		}
		rpq.sql = prev
	}
	return nil
}

func (rpq *RpmPackageQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RpmPackage, error) {
	var (
		nodes       = []*RpmPackage{}
		withFKs     = rpq.withFKs
		_spec       = rpq.querySpec()
		loadedTypes = [1]bool{
			rpq.withRepo != nil,
		}
	)
	if rpq.withRepo != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, rpmpackage.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*RpmPackage).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &RpmPackage{config: rpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rpq.withRepo; query != nil {
		if err := rpq.loadRepo(ctx, query, nodes, nil,
			func(n *RpmPackage, e *Repo) { n.Edges.Repo = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rpq *RpmPackageQuery) loadRepo(ctx context.Context, query *RepoQuery, nodes []*RpmPackage, init func(*RpmPackage), assign func(*RpmPackage, *Repo)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*RpmPackage)
	for i := range nodes {
		if nodes[i].repo_rpms == nil {
			continue
		}
		fk := *nodes[i].repo_rpms
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(repo.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "repo_rpms" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rpq *RpmPackageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rpq.querySpec()
	_spec.Node.Columns = rpq.fields
	if len(rpq.fields) > 0 {
		_spec.Unique = rpq.unique != nil && *rpq.unique
	}
	return sqlgraph.CountNodes(ctx, rpq.driver, _spec)
}

func (rpq *RpmPackageQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rpq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (rpq *RpmPackageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rpmpackage.Table,
			Columns: rpmpackage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rpmpackage.FieldID,
			},
		},
		From:   rpq.sql,
		Unique: true,
	}
	if unique := rpq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rpq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rpmpackage.FieldID)
		for i := range fields {
			if fields[i] != rpmpackage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rpq *RpmPackageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rpq.driver.Dialect())
	t1 := builder.Table(rpmpackage.Table)
	columns := rpq.fields
	if len(columns) == 0 {
		columns = rpmpackage.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rpq.sql != nil {
		selector = rpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rpq.unique != nil && *rpq.unique {
		selector.Distinct()
	}
	for _, p := range rpq.predicates {
		p(selector)
	}
	for _, p := range rpq.order {
		p(selector)
	}
	if offset := rpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RpmPackageGroupBy is the group-by builder for RpmPackage entities.
type RpmPackageGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rpgb *RpmPackageGroupBy) Aggregate(fns ...AggregateFunc) *RpmPackageGroupBy {
	rpgb.fns = append(rpgb.fns, fns...)
	return rpgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rpgb *RpmPackageGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rpgb.path(ctx)
	if err != nil {
		return err
	}
	rpgb.sql = query
	return rpgb.sqlScan(ctx, v)
}

func (rpgb *RpmPackageGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rpgb.fields {
		if !rpmpackage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rpgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rpgb *RpmPackageGroupBy) sqlQuery() *sql.Selector {
	selector := rpgb.sql.Select()
	aggregation := make([]string, 0, len(rpgb.fns))
	for _, fn := range rpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rpgb.fields)+len(rpgb.fns))
		for _, f := range rpgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rpgb.fields...)...)
}

// RpmPackageSelect is the builder for selecting fields of RpmPackage entities.
type RpmPackageSelect struct {
	*RpmPackageQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (rps *RpmPackageSelect) Scan(ctx context.Context, v interface{}) error {
	if err := rps.prepareQuery(ctx); err != nil {
		return err
	}
	rps.sql = rps.RpmPackageQuery.sqlQuery(ctx)
	return rps.sqlScan(ctx, v)
}

func (rps *RpmPackageSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rps.sql.Query()
	if err := rps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
