// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/FyraLabs/subatomic/server/ent/migrate"

	"github.com/FyraLabs/subatomic/server/ent/repo"
	"github.com/FyraLabs/subatomic/server/ent/rpmpackage"
	"github.com/FyraLabs/subatomic/server/ent/signingkey"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Repo is the client for interacting with the Repo builders.
	Repo *RepoClient
	// RpmPackage is the client for interacting with the RpmPackage builders.
	RpmPackage *RpmPackageClient
	// SigningKey is the client for interacting with the SigningKey builders.
	SigningKey *SigningKeyClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Repo = NewRepoClient(c.config)
	c.RpmPackage = NewRpmPackageClient(c.config)
	c.SigningKey = NewSigningKeyClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Repo:       NewRepoClient(cfg),
		RpmPackage: NewRpmPackageClient(cfg),
		SigningKey: NewSigningKeyClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Repo:       NewRepoClient(cfg),
		RpmPackage: NewRpmPackageClient(cfg),
		SigningKey: NewSigningKeyClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Repo.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Repo.Use(hooks...)
	c.RpmPackage.Use(hooks...)
	c.SigningKey.Use(hooks...)
}

// RepoClient is a client for the Repo schema.
type RepoClient struct {
	config
}

// NewRepoClient returns a client for the Repo from the given config.
func NewRepoClient(c config) *RepoClient {
	return &RepoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repo.Hooks(f(g(h())))`.
func (c *RepoClient) Use(hooks ...Hook) {
	c.hooks.Repo = append(c.hooks.Repo, hooks...)
}

// Create returns a builder for creating a Repo entity.
func (c *RepoClient) Create() *RepoCreate {
	mutation := newRepoMutation(c.config, OpCreate)
	return &RepoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Repo entities.
func (c *RepoClient) CreateBulk(builders ...*RepoCreate) *RepoCreateBulk {
	return &RepoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Repo.
func (c *RepoClient) Update() *RepoUpdate {
	mutation := newRepoMutation(c.config, OpUpdate)
	return &RepoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepoClient) UpdateOne(r *Repo) *RepoUpdateOne {
	mutation := newRepoMutation(c.config, OpUpdateOne, withRepo(r))
	return &RepoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepoClient) UpdateOneID(id string) *RepoUpdateOne {
	mutation := newRepoMutation(c.config, OpUpdateOne, withRepoID(id))
	return &RepoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Repo.
func (c *RepoClient) Delete() *RepoDelete {
	mutation := newRepoMutation(c.config, OpDelete)
	return &RepoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RepoClient) DeleteOne(r *Repo) *RepoDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RepoClient) DeleteOneID(id string) *RepoDeleteOne {
	builder := c.Delete().Where(repo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepoDeleteOne{builder}
}

// Query returns a query builder for Repo.
func (c *RepoClient) Query() *RepoQuery {
	return &RepoQuery{
		config: c.config,
	}
}

// Get returns a Repo entity by its id.
func (c *RepoClient) Get(ctx context.Context, id string) (*Repo, error) {
	return c.Query().Where(repo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepoClient) GetX(ctx context.Context, id string) *Repo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRpms queries the rpms edge of a Repo.
func (c *RepoClient) QueryRpms(r *Repo) *RpmPackageQuery {
	query := &RpmPackageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repo.Table, repo.FieldID, id),
			sqlgraph.To(rpmpackage.Table, rpmpackage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repo.RpmsTable, repo.RpmsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKey queries the key edge of a Repo.
func (c *RepoClient) QueryKey(r *Repo) *SigningKeyQuery {
	query := &SigningKeyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repo.Table, repo.FieldID, id),
			sqlgraph.To(signingkey.Table, signingkey.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, repo.KeyTable, repo.KeyColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepoClient) Hooks() []Hook {
	return c.hooks.Repo
}

// RpmPackageClient is a client for the RpmPackage schema.
type RpmPackageClient struct {
	config
}

// NewRpmPackageClient returns a client for the RpmPackage from the given config.
func NewRpmPackageClient(c config) *RpmPackageClient {
	return &RpmPackageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rpmpackage.Hooks(f(g(h())))`.
func (c *RpmPackageClient) Use(hooks ...Hook) {
	c.hooks.RpmPackage = append(c.hooks.RpmPackage, hooks...)
}

// Create returns a builder for creating a RpmPackage entity.
func (c *RpmPackageClient) Create() *RpmPackageCreate {
	mutation := newRpmPackageMutation(c.config, OpCreate)
	return &RpmPackageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RpmPackage entities.
func (c *RpmPackageClient) CreateBulk(builders ...*RpmPackageCreate) *RpmPackageCreateBulk {
	return &RpmPackageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RpmPackage.
func (c *RpmPackageClient) Update() *RpmPackageUpdate {
	mutation := newRpmPackageMutation(c.config, OpUpdate)
	return &RpmPackageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RpmPackageClient) UpdateOne(rp *RpmPackage) *RpmPackageUpdateOne {
	mutation := newRpmPackageMutation(c.config, OpUpdateOne, withRpmPackage(rp))
	return &RpmPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RpmPackageClient) UpdateOneID(id int) *RpmPackageUpdateOne {
	mutation := newRpmPackageMutation(c.config, OpUpdateOne, withRpmPackageID(id))
	return &RpmPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RpmPackage.
func (c *RpmPackageClient) Delete() *RpmPackageDelete {
	mutation := newRpmPackageMutation(c.config, OpDelete)
	return &RpmPackageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RpmPackageClient) DeleteOne(rp *RpmPackage) *RpmPackageDeleteOne {
	return c.DeleteOneID(rp.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RpmPackageClient) DeleteOneID(id int) *RpmPackageDeleteOne {
	builder := c.Delete().Where(rpmpackage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RpmPackageDeleteOne{builder}
}

// Query returns a query builder for RpmPackage.
func (c *RpmPackageClient) Query() *RpmPackageQuery {
	return &RpmPackageQuery{
		config: c.config,
	}
}

// Get returns a RpmPackage entity by its id.
func (c *RpmPackageClient) Get(ctx context.Context, id int) (*RpmPackage, error) {
	return c.Query().Where(rpmpackage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RpmPackageClient) GetX(ctx context.Context, id int) *RpmPackage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRepo queries the repo edge of a RpmPackage.
func (c *RpmPackageClient) QueryRepo(rp *RpmPackage) *RepoQuery {
	query := &RepoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rpmpackage.Table, rpmpackage.FieldID, id),
			sqlgraph.To(repo.Table, repo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rpmpackage.RepoTable, rpmpackage.RepoColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RpmPackageClient) Hooks() []Hook {
	return c.hooks.RpmPackage
}

// SigningKeyClient is a client for the SigningKey schema.
type SigningKeyClient struct {
	config
}

// NewSigningKeyClient returns a client for the SigningKey from the given config.
func NewSigningKeyClient(c config) *SigningKeyClient {
	return &SigningKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `signingkey.Hooks(f(g(h())))`.
func (c *SigningKeyClient) Use(hooks ...Hook) {
	c.hooks.SigningKey = append(c.hooks.SigningKey, hooks...)
}

// Create returns a builder for creating a SigningKey entity.
func (c *SigningKeyClient) Create() *SigningKeyCreate {
	mutation := newSigningKeyMutation(c.config, OpCreate)
	return &SigningKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SigningKey entities.
func (c *SigningKeyClient) CreateBulk(builders ...*SigningKeyCreate) *SigningKeyCreateBulk {
	return &SigningKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SigningKey.
func (c *SigningKeyClient) Update() *SigningKeyUpdate {
	mutation := newSigningKeyMutation(c.config, OpUpdate)
	return &SigningKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SigningKeyClient) UpdateOne(sk *SigningKey) *SigningKeyUpdateOne {
	mutation := newSigningKeyMutation(c.config, OpUpdateOne, withSigningKey(sk))
	return &SigningKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SigningKeyClient) UpdateOneID(id string) *SigningKeyUpdateOne {
	mutation := newSigningKeyMutation(c.config, OpUpdateOne, withSigningKeyID(id))
	return &SigningKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SigningKey.
func (c *SigningKeyClient) Delete() *SigningKeyDelete {
	mutation := newSigningKeyMutation(c.config, OpDelete)
	return &SigningKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SigningKeyClient) DeleteOne(sk *SigningKey) *SigningKeyDeleteOne {
	return c.DeleteOneID(sk.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SigningKeyClient) DeleteOneID(id string) *SigningKeyDeleteOne {
	builder := c.Delete().Where(signingkey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SigningKeyDeleteOne{builder}
}

// Query returns a query builder for SigningKey.
func (c *SigningKeyClient) Query() *SigningKeyQuery {
	return &SigningKeyQuery{
		config: c.config,
	}
}

// Get returns a SigningKey entity by its id.
func (c *SigningKeyClient) Get(ctx context.Context, id string) (*SigningKey, error) {
	return c.Query().Where(signingkey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SigningKeyClient) GetX(ctx context.Context, id string) *SigningKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRepo queries the repo edge of a SigningKey.
func (c *SigningKeyClient) QueryRepo(sk *SigningKey) *RepoQuery {
	query := &RepoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sk.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(signingkey.Table, signingkey.FieldID, id),
			sqlgraph.To(repo.Table, repo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, signingkey.RepoTable, signingkey.RepoColumn),
		)
		fromV = sqlgraph.Neighbors(sk.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SigningKeyClient) Hooks() []Hook {
	return c.hooks.SigningKey
}
