// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FyraLabs/subatomic/server/ent/predicate"
	"github.com/FyraLabs/subatomic/server/ent/repo"
	"github.com/FyraLabs/subatomic/server/ent/signingkey"
)

// SigningKeyUpdate is the builder for updating SigningKey entities.
type SigningKeyUpdate struct {
	config
	hooks    []Hook
	mutation *SigningKeyMutation
}

// Where appends a list predicates to the SigningKeyUpdate builder.
func (_u *SigningKeyUpdate) Where(ps ...predicate.SigningKey) *SigningKeyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPrivateKey sets the "private_key" field.
func (_u *SigningKeyUpdate) SetPrivateKey(v string) *SigningKeyUpdate {
	_u.mutation.SetPrivateKey(v)
	return _u
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (_u *SigningKeyUpdate) SetNillablePrivateKey(v *string) *SigningKeyUpdate {
	if v != nil {
		_u.SetPrivateKey(*v)
	}
	return _u
}

// SetPublicKey sets the "public_key" field.
func (_u *SigningKeyUpdate) SetPublicKey(v string) *SigningKeyUpdate {
	_u.mutation.SetPublicKey(v)
	return _u
}

// SetNillablePublicKey sets the "public_key" field if the given value is not nil.
func (_u *SigningKeyUpdate) SetNillablePublicKey(v *string) *SigningKeyUpdate {
	if v != nil {
		_u.SetPublicKey(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *SigningKeyUpdate) SetName(v string) *SigningKeyUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SigningKeyUpdate) SetNillableName(v *string) *SigningKeyUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *SigningKeyUpdate) SetEmail(v string) *SigningKeyUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *SigningKeyUpdate) SetNillableEmail(v *string) *SigningKeyUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// AddRepoIDs adds the "repo" edge to the Repo entity by IDs.
func (_u *SigningKeyUpdate) AddRepoIDs(ids ...string) *SigningKeyUpdate {
	_u.mutation.AddRepoIDs(ids...)
	return _u
}

// AddRepo adds the "repo" edges to the Repo entity.
func (_u *SigningKeyUpdate) AddRepo(v ...*Repo) *SigningKeyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRepoIDs(ids...)
}

// Mutation returns the SigningKeyMutation object of the builder.
func (_u *SigningKeyUpdate) Mutation() *SigningKeyMutation {
	return _u.mutation
}

// ClearRepo clears all "repo" edges to the Repo entity.
func (_u *SigningKeyUpdate) ClearRepo() *SigningKeyUpdate {
	_u.mutation.ClearRepo()
	return _u
}

// RemoveRepoIDs removes the "repo" edge to Repo entities by IDs.
func (_u *SigningKeyUpdate) RemoveRepoIDs(ids ...string) *SigningKeyUpdate {
	_u.mutation.RemoveRepoIDs(ids...)
	return _u
}

// RemoveRepo removes "repo" edges to Repo entities.
func (_u *SigningKeyUpdate) RemoveRepo(v ...*Repo) *SigningKeyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRepoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SigningKeyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SigningKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SigningKeyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SigningKeyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SigningKeyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(signingkey.Table, signingkey.Columns, sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PrivateKey(); ok {
		_spec.SetField(signingkey.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.PublicKey(); ok {
		_spec.SetField(signingkey.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(signingkey.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(signingkey.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   signingkey.RepoTable,
			Columns: []string{signingkey.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRepoIDs(); len(nodes) > 0 && !_u.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   signingkey.RepoTable,
			Columns: []string{signingkey.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   signingkey.RepoTable,
			Columns: []string{signingkey.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signingkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SigningKeyUpdateOne is the builder for updating a single SigningKey entity.
type SigningKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SigningKeyMutation
}

// SetPrivateKey sets the "private_key" field.
func (_u *SigningKeyUpdateOne) SetPrivateKey(v string) *SigningKeyUpdateOne {
	_u.mutation.SetPrivateKey(v)
	return _u
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (_u *SigningKeyUpdateOne) SetNillablePrivateKey(v *string) *SigningKeyUpdateOne {
	if v != nil {
		_u.SetPrivateKey(*v)
	}
	return _u
}

// SetPublicKey sets the "public_key" field.
func (_u *SigningKeyUpdateOne) SetPublicKey(v string) *SigningKeyUpdateOne {
	_u.mutation.SetPublicKey(v)
	return _u
}

// SetNillablePublicKey sets the "public_key" field if the given value is not nil.
func (_u *SigningKeyUpdateOne) SetNillablePublicKey(v *string) *SigningKeyUpdateOne {
	if v != nil {
		_u.SetPublicKey(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *SigningKeyUpdateOne) SetName(v string) *SigningKeyUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SigningKeyUpdateOne) SetNillableName(v *string) *SigningKeyUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *SigningKeyUpdateOne) SetEmail(v string) *SigningKeyUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *SigningKeyUpdateOne) SetNillableEmail(v *string) *SigningKeyUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// AddRepoIDs adds the "repo" edge to the Repo entity by IDs.
func (_u *SigningKeyUpdateOne) AddRepoIDs(ids ...string) *SigningKeyUpdateOne {
	_u.mutation.AddRepoIDs(ids...)
	return _u
}

// AddRepo adds the "repo" edges to the Repo entity.
func (_u *SigningKeyUpdateOne) AddRepo(v ...*Repo) *SigningKeyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRepoIDs(ids...)
}

// Mutation returns the SigningKeyMutation object of the builder.
func (_u *SigningKeyUpdateOne) Mutation() *SigningKeyMutation {
	return _u.mutation
}

// ClearRepo clears all "repo" edges to the Repo entity.
func (_u *SigningKeyUpdateOne) ClearRepo() *SigningKeyUpdateOne {
	_u.mutation.ClearRepo()
	return _u
}

// RemoveRepoIDs removes the "repo" edge to Repo entities by IDs.
func (_u *SigningKeyUpdateOne) RemoveRepoIDs(ids ...string) *SigningKeyUpdateOne {
	_u.mutation.RemoveRepoIDs(ids...)
	return _u
}

// RemoveRepo removes "repo" edges to Repo entities.
func (_u *SigningKeyUpdateOne) RemoveRepo(v ...*Repo) *SigningKeyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRepoIDs(ids...)
}

// Where appends a list predicates to the SigningKeyUpdate builder.
func (_u *SigningKeyUpdateOne) Where(ps ...predicate.SigningKey) *SigningKeyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SigningKeyUpdateOne) Select(field string, fields ...string) *SigningKeyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SigningKey entity.
func (_u *SigningKeyUpdateOne) Save(ctx context.Context) (*SigningKey, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SigningKeyUpdateOne) SaveX(ctx context.Context) *SigningKey {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SigningKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SigningKeyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SigningKeyUpdateOne) sqlSave(ctx context.Context) (_node *SigningKey, err error) {
	_spec := sqlgraph.NewUpdateSpec(signingkey.Table, signingkey.Columns, sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SigningKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, signingkey.FieldID)
		for _, f := range fields {
			if !signingkey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != signingkey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PrivateKey(); ok {
		_spec.SetField(signingkey.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.PublicKey(); ok {
		_spec.SetField(signingkey.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(signingkey.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(signingkey.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   signingkey.RepoTable,
			Columns: []string{signingkey.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRepoIDs(); len(nodes) > 0 && !_u.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   signingkey.RepoTable,
			Columns: []string{signingkey.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   signingkey.RepoTable,
			Columns: []string{signingkey.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SigningKey{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signingkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
