// Code generated by ent, DO NOT EDIT.

package repo

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the repo type in the database.
	Label = "repo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTetsudouURL holds the string denoting the tetsudou_url field in the database.
	FieldTetsudouURL = "tetsudou_url"
	// FieldTetsudouToken holds the string denoting the tetsudou_token field in the database.
	FieldTetsudouToken = "tetsudou_token"
	// EdgeRpms holds the string denoting the rpms edge name in mutations.
	EdgeRpms = "rpms"
	// EdgeKey holds the string denoting the key edge name in mutations.
	EdgeKey = "key"
	// RpmPackageFieldID holds the string denoting the ID field of the RpmPackage.
	RpmPackageFieldID = "id"
	// Table holds the table name of the repo in the database.
	Table = "repos"
	// RpmsTable is the table that holds the rpms relation/edge.
	RpmsTable = "rpm_packages"
	// RpmsInverseTable is the table name for the RpmPackage entity.
	// It exists in this package in order to avoid circular dependency with the "rpmpackage" package.
	RpmsInverseTable = "rpm_packages"
	// RpmsColumn is the table column denoting the rpms relation/edge.
	RpmsColumn = "repo_rpms"
	// KeyTable is the table that holds the key relation/edge.
	KeyTable = "repos"
	// KeyInverseTable is the table name for the SigningKey entity.
	// It exists in this package in order to avoid circular dependency with the "signingkey" package.
	KeyInverseTable = "signing_keys"
	// KeyColumn is the table column denoting the key relation/edge.
	KeyColumn = "repo_key"
)

// Columns holds all SQL columns for repo fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldTetsudouURL,
	FieldTetsudouToken,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "repos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"repo_key",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeRpm Type = "rpm"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeRpm:
		return nil
	default:
		return fmt.Errorf("repo: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Repo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTetsudouURL orders the results by the tetsudou_url field.
func ByTetsudouURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTetsudouURL, opts...).ToFunc()
}

// ByTetsudouToken orders the results by the tetsudou_token field.
func ByTetsudouToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTetsudouToken, opts...).ToFunc()
}

// ByRpmsCount orders the results by rpms count.
func ByRpmsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRpmsStep(), opts...)
	}
}

// ByRpms orders the results by rpms terms.
func ByRpms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRpmsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByKeyField orders the results by key field.
func ByKeyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKeyStep(), sql.OrderByField(field, opts...))
	}
}
func newRpmsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RpmsInverseTable, RpmPackageFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RpmsTable, RpmsColumn),
	)
}
func newKeyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KeyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, KeyTable, KeyColumn),
	)
}
