// Code generated by ent, DO NOT EDIT.

package repo

import (
	"fmt"
)

const (
	// Label holds the string label denoting the repo type in the database.
	Label = "repo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeRpms holds the string denoting the rpms edge name in mutations.
	EdgeRpms = "rpms"
	// RpmPackageFieldID holds the string denoting the ID field of the RpmPackage.
	RpmPackageFieldID = "id"
	// Table holds the table name of the repo in the database.
	Table = "repos"
	// RpmsTable is the table that holds the rpms relation/edge.
	RpmsTable = "rpm_packages"
	// RpmsInverseTable is the table name for the RpmPackage entity.
	// It exists in this package in order to avoid circular dependency with the "rpmpackage" package.
	RpmsInverseTable = "rpm_packages"
	// RpmsColumn is the table column denoting the rpms relation/edge.
	RpmsColumn = "repo_rpms"
)

// Columns holds all SQL columns for repo fields.
var Columns = []string{
	FieldID,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeRpm    Type = "rpm"
	TypeOstree Type = "ostree"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeRpm, TypeOstree:
		return nil
	default:
		return fmt.Errorf("repo: invalid enum value for type field: %q", _type)
	}
}
