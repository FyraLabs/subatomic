// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FyraLabs/subatomic/server/ent/predicate"
	"github.com/FyraLabs/subatomic/server/ent/signingkey"
)

// SigningKeyDelete is the builder for deleting a SigningKey entity.
type SigningKeyDelete struct {
	config
	hooks    []Hook
	mutation *SigningKeyMutation
}

// Where appends a list predicates to the SigningKeyDelete builder.
func (skd *SigningKeyDelete) Where(ps ...predicate.SigningKey) *SigningKeyDelete {
	skd.mutation.Where(ps...)
	return skd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (skd *SigningKeyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, SigningKeyMutation](ctx, skd.sqlExec, skd.mutation, skd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (skd *SigningKeyDelete) ExecX(ctx context.Context) int {
	n, err := skd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (skd *SigningKeyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(signingkey.Table, sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString))
	if ps := skd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, skd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	skd.mutation.done = true
	return affected, err
}

// SigningKeyDeleteOne is the builder for deleting a single SigningKey entity.
type SigningKeyDeleteOne struct {
	skd *SigningKeyDelete
}

// Where appends a list predicates to the SigningKeyDelete builder.
func (skdo *SigningKeyDeleteOne) Where(ps ...predicate.SigningKey) *SigningKeyDeleteOne {
	skdo.skd.mutation.Where(ps...)
	return skdo
}

// Exec executes the deletion query.
func (skdo *SigningKeyDeleteOne) Exec(ctx context.Context) error {
	n, err := skdo.skd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{signingkey.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (skdo *SigningKeyDeleteOne) ExecX(ctx context.Context) {
	if err := skdo.Exec(ctx); err != nil {
		panic(err)
	}
}
